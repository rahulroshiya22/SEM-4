// Create the Employee collection and insert 10 documents
db.Employee.insertMany([
    { EID: 1, ENAME: "Nick", GENDER: "Male", JOININGDATE: "01-JAN-13", SALARY: 4000, CITY: "London" },
    { EID: 2, ENAME: "Julian", GENDER: "Female", JOININGDATE: "01-OCT-14", SALARY: 3000, CITY: "New York" },
    { EID: 3, ENAME: "Roy", GENDER: "Male", JOININGDATE: "01-JUN-16", SALARY: 3500, CITY: "London" },
    { EID: 4, ENAME: "Tom", GENDER: "Male", JOININGDATE: null, SALARY: 4500, CITY: "London" },
    { EID: 5, ENAME: "Jerry", GENDER: "Male", JOININGDATE: "01-FEB-13", SALARY: 2800, CITY: "Sydney" },
    { EID: 6, ENAME: "Philip", GENDER: "Male", JOININGDATE: "01-JAN-15", SALARY: 7000, CITY: "New York" },
    { EID: 7, ENAME: "Sara", GENDER: "Female", JOININGDATE: "01-AUG-17", SALARY: 4800, CITY: "Sydney" },
    { EID: 8, ENAME: "Emily", GENDER: "Female", JOININGDATE: "01-JAN-15", SALARY: 5500, CITY: "New York" },
    { EID: 9, ENAME: "Michael", GENDER: "Male", JOININGDATE: null, SALARY: 6500, CITY: "London" },
    { EID: 10, ENAME: "John", GENDER: "Male", JOININGDATE: "01-JAN-15", SALARY: 8800, CITY: "London" }
]);

// Queries

// 1. Employees whose name starts with E
db.Employee.find({ ENAME: /^E/ });

// 2. Employees whose name ends with n
db.Employee.find({ ENAME: /n$/ });

// 3. Employees whose name starts with S or M
db.Employee.find({ ENAME: /^[SM]/ });

// 4. Employees where city starts with A to M
db.Employee.find({ CITY: /^[A-M]/ });

// 5. Employees where city name ends in 'ney'
db.Employee.find({ CITY: /ney$/ });

// 6. Employees whose name contains 'n' (both cases)
db.Employee.find({ ENAME: /n/i });

// 7. Employees whose name starts with E and has 5 characters
db.Employee.find({ ENAME: /^E.{4}$/ });

// 8. Employees whose name starts with S and ends in a
db.Employee.find({ ENAME: /^S.*a$/ });

// 9. Display EID, ENAME, CITY, SALARY whose name starts with 'Phi'
db.Employee.find({ ENAME: /^Phi/ }, { EID: 1, ENAME: 1, CITY: 1, SALARY: 1 });

// 10. Display ENAME, JOININGDATE, CITY where city contains 'dne'
db.Employee.find({ CITY: /dne/ }, { ENAME: 1, JOININGDATE: 1, CITY: 1 });

// 11. Employees who do not belong to London or Sydney
db.Employee.find({ CITY: { $nin: ["London", "Sydney"] } });

// 12. Employees whose names start with 'J'
db.Employee.find({ ENAME: /^J/ });

// 13. Employees whose names end with 'y'
db.Employee.find({ ENAME: /y$/ });

// 14. Employees whose names contain the letter 'a'
db.Employee.find({ ENAME: /a/ });

// 15. Employees whose names contain either 'a' or 'e'
db.Employee.find({ ENAME: /[ae]/ });

// 16. Employees whose names start with 'J' and end with 'n'
db.Employee.find({ ENAME: /^J.*n$/ });

// 17. Employees whose CITY starts with 'New'
db.Employee.find({ CITY: /^New/ });

// 18. Employees whose CITY does not start with 'L'
db.Employee.find({ CITY: { $not: /^L/ } });

// 19. Employees whose CITY contains 'York'
db.Employee.find({ CITY: /York/ });

// 20. Employees whose names have two consecutive vowels
db.Employee.find({ ENAME: /[aeiou]{2}/ });

// 21. Employees whose names have three or more letters
db.Employee.find({ ENAME: /^.{3,}$/ });

// 22. Employees whose names have exactly 4 letters
db.Employee.find({ ENAME: /^.{4}$/ });

// 23. Employees whose names start with either 'S' or 'M'
db.Employee.find({ ENAME: /^[SM]/ });

// 24. Employees whose names contain 'il' anywhere
db.Employee.find({ ENAME: /il/ });

// 25. Employees whose names do not contain 'a'
db.Employee.find({ ENAME: { $not: /a/ } });

// 26. Employees whose names contain any digit
db.Employee.find({ ENAME: /\d/ });

// 27. Employees whose names contain exactly one vowel
db.Employee.find({ ENAME: /^[^aeiou]*[aeiou][^aeiou]*$/i });

// 28. Employees whose names start with any uppercase letter followed by any lowercase letter
db.Employee.find({ ENAME: /^[A-Z][a-z]/ });


// Part-B

// 1. Display documents where SNAME starts with 'K'
db.Student.find({ SNAME: /^K/ })

// 2. Display documents where SNAME starts with 'Z' or 'D'
db.Student.find({ SNAME: /^[ZD]/ })

// 3. Display documents where CITY starts with A to R
db.Student.find({ CITY: /^[A-R]/ })

// 4. Display students’ info whose name starts with 'P' and ends with 'i'
db.Student.find({ SNAME: /^P.*i$/ })

// 5. Display students’ info whose department name starts with ‘C’
db.Student.find({ DEPARTMENT: /^C/ })

// 6. Display name, sem, fees, and department whose city contains ‘med’ as three letters somewhere in city name
db.Student.find(
  { CITY: /med/ },
  { SNAME: 1, SEM: 1, FEES: 1, DEPARTMENT: 1, _id: 0 }
)

// 7. Display name, sem, fees, and department who do not belong to city Rajkot or Baroda
db.Student.find(
  { CITY: { $nin: ["Rajkot", "Baroda"] } },
  { SNAME: 1, SEM: 1, FEES: 1, DEPARTMENT: 1, _id: 0 }
)

// 8. Find students whose names start with 'K' and are followed by any character
db.Student.find({ SNAME: /^K./ })

// 9. Find students whose names end with 'a'
db.Student.find({ SNAME: /a$/ })

// 10. Find students whose names contain 'ri' (case-insensitive)
db.Student.find({ SNAME: /ri/i })

// Part-C

// 1. Find students whose names start with a vowel (A, E, I, O, U).
db.Student.find({SNAME: /^[AEIOUaeiou]/})

// 2. Find students whose CITY ends with 'pur' or 'bad'.
db.Student.find({ CITY: /(pur|bad)$/ })

// 3. Find students whose FEES start with '1'.
db.Student.find({ FEES: /'^1'/})

// 4. Find students whose SNAME starts with 'K' or 'V'.
db.Student.find({ SNAME: /'^[KV]'/})

// 5. Find students whose CITY contains exactly five characters.
db.Student.find({ CITY: /'^.{5}$'/})

// 6. Find students whose names do not contain the letter 'e'.
db.Student.find({ SNAME: { $not: /e/i } })

// 7. Find students whose CITY starts with 'Ra' and ends with 'ot'.
db.Student.find({ CITY: /'^Ra.*ot$'/})

// 8. Find students whose names contain exactly one vowel.
db.Student.find({ SNAME: /'^[^AEIOUaeiou]*[AEIOUaeiou][^AEIOUaeiou]*$'})

// 9. Find students whose names start and end with the same letter.
db.Student.find({ SNAME: /^(.).*\1$/})

// 10. Find students whose DEPARTMENT starts with either 'C' or 'E'.
db.Student.find({ DEPARTMENT: /'^[CE]'/})

// 11. Find students whose SNAME has exactly 5 characters.
db.Student.find({ SNAME: /'^.{5}$'/})

// 12. Find students whose GENDER is Female and CITY starts with 'A'.
db.Student.find({ GENDER: 'Female', CITY: /'^A'/})

